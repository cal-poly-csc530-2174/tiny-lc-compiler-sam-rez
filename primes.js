((function (dividesP) { return ((function (prime_loop) { return ((function (isPrimeP) { return ((function (loop) { return ((loop (loop)) (10000)) }) ((function (loop) { return (function (n) { return ((n + (-1 * 2)) <= 0? ((2 + (-1 * n)) <= 0? 2 : ((((isPrimeP (isPrimeP)) (n)) + (-1 * 1)) <= 0? ((1 + (-1 * ((isPrimeP (isPrimeP)) (n)))) <= 0? ((function (x) { return ((loop (loop)) ((n + -1))) }) ((console.log (n)))) : ((loop (loop)) ((n + -1)))) : ((loop (loop)) ((n + -1))))) : ((((isPrimeP (isPrimeP)) (n)) + (-1 * 1)) <= 0? ((1 + (-1 * ((isPrimeP (isPrimeP)) (n)))) <= 0? ((function (x) { return ((loop (loop)) ((n + -1))) }) ((console.log (n)))) : ((loop (loop)) ((n + -1)))) : ((loop (loop)) ((n + -1))))) }) }))) }) ((function (isPrimeP) { return (function (n) { return (((prime_loop (prime_loop)) (n)) ((n + -1))) }) }))) }) ((function (prime_loop) { return (function (n) { return (function (divisor) { return ((n + (-1 * 1)) <= 0? ((1 + (-1 * n)) <= 0? 1 : ((divisor + (-1 * 1)) <= 0? ((1 + (-1 * divisor)) <= 0? 1 : (((((dividesP (dividesP)) (divisor)) (n)) + (-1 * 1)) <= 0? ((1 + (-1 * (((dividesP (dividesP)) (divisor)) (n)))) <= 0? 0 : (((prime_loop (prime_loop)) (n)) ((divisor + -1)))) : (((prime_loop (prime_loop)) (n)) ((divisor + -1))))) : (((((dividesP (dividesP)) (divisor)) (n)) + (-1 * 1)) <= 0? ((1 + (-1 * (((dividesP (dividesP)) (divisor)) (n)))) <= 0? 0 : (((prime_loop (prime_loop)) (n)) ((divisor + -1)))) : (((prime_loop (prime_loop)) (n)) ((divisor + -1)))))) : ((divisor + (-1 * 1)) <= 0? ((1 + (-1 * divisor)) <= 0? 1 : (((((dividesP (dividesP)) (divisor)) (n)) + (-1 * 1)) <= 0? ((1 + (-1 * (((dividesP (dividesP)) (divisor)) (n)))) <= 0? 0 : (((prime_loop (prime_loop)) (n)) ((divisor + -1)))) : (((prime_loop (prime_loop)) (n)) ((divisor + -1))))) : (((((dividesP (dividesP)) (divisor)) (n)) + (-1 * 1)) <= 0? ((1 + (-1 * (((dividesP (dividesP)) (divisor)) (n)))) <= 0? 0 : (((prime_loop (prime_loop)) (n)) ((divisor + -1)))) : (((prime_loop (prime_loop)) (n)) ((divisor + -1)))))) }) }) }))) }) ((function (dividesP) { return (function (divisor) { return (function (n) { return ((function (loop) { return ((loop (loop)) (1)) }) ((function (loop) { return (function (m) { return (((divisor * m) + (-1 * n)) <= 0? ((n + (-1 * (divisor * m))) <= 0? 1 : (((n + (-1 * (divisor * m))) + (-1 * 1)) <= 0? 0 : ((loop (loop)) ((m + 1))))) : (((n + (-1 * (divisor * m))) + (-1 * 1)) <= 0? 0 : ((loop (loop)) ((m + 1))))) }) }))) }) }) })))